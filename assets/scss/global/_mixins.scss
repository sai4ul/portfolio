/* 
    display: flex;
    justify-content: space-between;
    justify-content: center;
    justify-content: start;
    justify-content: end;
    align-items: center;
    flex-wrap: wrap;
*/
// @include transform(scale(1.1));
// @include border-radius(3px);

// @include flexbox();
// @include justify-content(space-between);
// @include justify-content(center);
// @include justify-content(flex-end);
// @include justify-content(flex-start);
// --  flex-start | flex-end | center | space-between | space-around ---

// @include align-items(center);
// @include flex-wrap(wrap);
  

//  transition
    $transition: all 0.3s ease-in;
    $transition-long: all 0.5s ease-in;

  // @include transition(.4s);
  @mixin transition($time) {
    -webkit-transition: all $time ease-out 0s;
    -moz-transition: all $time ease-out 0s;
    -ms-transition: all $time ease-out 0s;
    -o-transition: all $time ease-out 0s;
    transition: all $time ease-out 0s;
  }

  @mixin transform($value) {
    -webkit-transform: $value;
        -ms-transform: $value;
            transform: $value;
           
  }
  
  // Flexbox display
  // @include flexbox();
  @mixin flexbox() {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
  }
    
    // Inline flex display
    @mixin inline-flex {
    display: -webkit-inline-box;
    display: -moz-inline-box;
    display: -webkit-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
  }
    
  // nowrap | wrap | wrap-reverse
  // @include flex-wrap(wrap);
  @mixin flex-wrap($value: nowrap) {
    // No Webkit/FF Box fallback.
    -webkit-flex-wrap: $value;
    @if $value == nowrap {
      -ms-flex-wrap: none;
    } @else {
      -ms-flex-wrap: $value;
    }
    flex-wrap: $value;
  }
    
    
    // - applies to: flex containers
    // <flex-direction> || <flex-wrap>
    @mixin flex-flow($values: (row nowrap)) {
    // No Webkit/FF Box fallback.
    -webkit-flex-flow: $values;
      -ms-flex-flow: $values;
        flex-flow: $values;
    }
    
  
    // Display Order
    // - applies to: flex items
    // <integer>
    @mixin order($int: 0) {
    -webkit-box-ordinal-group: $int + 1;
       -moz-box-ordinal-group: $int + 1;
          -webkit-order: $int;
           -ms-flex-order: $int;
              order: $int;
    }
    
    
    // Flex grow factor
    // - applies to: flex items
    // <number>
    @mixin flex-grow($int: 1) {
    -webkit-box-flex: $int;
       -moz-box-flex: $int;
     -webkit-flex-grow: $int;
        -ms-flex: $int;
         flex-grow: $int;
    }
    
    // Flex shrink
    // - applies to: flex item shrink factor
    // <number> 
    @mixin flex-shrink($int: 0) {
     -webkit-flex-shrink: $int;
      -moz-flex-shrink: $int;
          -ms-flex: $int;
         flex-shrink: $int;
    }
    
    // Flex basis
    // - the initial main size of the flex item
    // - applies to: flex itemsnitial main size of the flex item
    // <width> 
    @mixin flex-basis($value: auto) {
     -webkit-flex-basis: $value;
         flex-basis: $value;
    }
    
    //@include justify-content(space-between);
    // Axis Alignment [justify-content]
    // flex-start | flex-end | center | space-between | space-around 
    @mixin justify-content($value: flex-start) {
    @if $value == flex-start {
      -webkit-box-pack: start;
       -moz-box-pack: start;
       -ms-flex-pack: start;
    } @else if $value == flex-end {
      -webkit-box-pack: end;
       -moz-box-pack: end;
       -ms-flex-pack: end;
    } @else if $value == space-between {
      -webkit-box-pack: justify;
       -moz-box-pack: justify;
       -ms-flex-pack: justify;
    } @else if $value == space-around {
       -ms-flex-pack: distribute;
    } @else {
      -webkit-box-pack: $value;
       -moz-box-pack: $value;
       -ms-flex-pack: $value;
    }
    -webkit-justify-content: $value;
        justify-content: $value;
    }
    
    
    // @include align-items(center);
    // Cross-axis Alignment [ align-items]
    // flex-start | flex-end | center | baseline | stretch 
    @mixin align-items($value: stretch) {
    @if $value == flex-start {
      -webkit-box-align: start;
       -moz-box-align: start;
       -ms-flex-align: start;
    } @else if $value == flex-end {
      -webkit-box-align: end;
       -moz-box-align: end;
       -ms-flex-align: end;
    } @else {
      -webkit-box-align: $value;
       -moz-box-align: $value;
       -ms-flex-align: $value;
    }
    -webkit-align-items: $value;
        align-items: $value;
    }
    
    
    // Cross-axis Alignment
    // - applies to: flex items
    // auto | flex-start | flex-end | center | baseline | stretch 
    @mixin align-self($value: auto) {
    // No Webkit Box Fallback.
    -webkit-align-self: $value;
    @if $value == flex-start {
      -ms-flex-item-align: start;
    } @else if $value == flex-end {
      -ms-flex-item-align: end;
    } @else {
      -ms-flex-item-align: $value;
    }
    align-self: $value;
    }
    
    // Packing Flex Lines [align-content]
    // flex-start | flex-end | center | space-between | space-around | stretch 
    @mixin align-content($value: stretch) {
    // No Webkit Box Fallback.
    -webkit-align-content: $value;
    @if $value == flex-start {
      -ms-flex-line-pack: start;
    } @else if $value == flex-end {
      -ms-flex-line-pack: end;
    } @else {
      -ms-flex-line-pack: $value;
    }
    align-content: $value;
    }
    
    
    // Flex Flow Direction [flex-direction]
    // row (default) | row-reverse | column | column-reverse
    @mixin flex-direction($direction: row) {
    @if $direction == row-reverse {
      -webkit-box-direction: reverse;
      -webkit-box-orient: horizontal;
       -moz-box-direction: reverse;
       -moz-box-orient: horizontal;
    } @else if $direction == column {
      -webkit-box-direction: normal;
       -webkit-box-orient: vertical;
       -moz-box-direction: normal;
        -moz-box-orient: vertical;
    } @else if $direction == column-reverse {
      -webkit-box-direction: reverse;
      -webkit-box-orient: vertical;
       -moz-box-direction: reverse;
         -moz-box-orient: vertical;
    } @else {
       -webkit-box-direction: normal;
      -webkit-box-orient: horizontal;
        -moz-box-direction: normal;
       -moz-box-orient: horizontal;
    }
    -webkit-flex-direction: $direction;
      -ms-flex-direction: $direction;
        flex-direction: $direction;
    }
    
    
  
    // transform
    @mixin transform($value) {
    -webkit-transform: $value;
      -ms-transform: $value;
        transform: $value;
    }
    
    
    // Translate
    @mixin translate ($x, $y) {
      @include transform(translate($x, $y));
    }
  
    // TranslateY
    @mixin translateY ($y) {
      @include transform(translateY($y));
    }
  
    // TranslateY
    @mixin translateX ($x) {
    @include transform(translateX($x));
    }
    
    
    // Box shadows
    @mixin box-shadow($shadow...) {
    -webkit-box-shadow: $shadow;
       -moz-box-shadow: $shadow;       
        box-shadow: $shadow;
    }
    // opacity
    @mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8
    }
    
    // 
    @mixin border-radius($man) {
    -webkit-border-radius: $man;
    -moz-border-radius: $man;
    border-radius: $man;
    }
    
    
    @mixin background($imgpath,$position: center,$size: cover,$repeat: no-repeat) {
    background: {
      image: url($imgpath);
      position: $position;
      repeat: $repeat;
      size: $size;
    }
    }
  
    @mixin transform_time($total_time) {
    -webkit-transition: $total_time;
    transition: $total_time;
    }
  
    @mixin placeholder {
      &.placeholder {
      @content;
      }
      &:-moz-placeholder {
      @content;
      }
      &::-moz-placeholder {
      @content;
      }
      &::-webkit-input-placeholder {
      @content;
      }
    }
  
    @mixin keyframes ($animation-name) {
      @-webkit-keyframes #{$animation-name} {
      @content;
      }
      @-moz-keyframes #{$animation-name} {
      @content;
      }
      @-o-keyframes #{$animation-name} {
      @content;
      }
      @keyframes #{$animation-name} {
      @content;
      }
    }





// New ----------------------------------------------------------------

@mixin gradient-border-with-radius($left, $right) {
    background-image: linear-gradient(white, white), radial-gradient(circle at top left, $left, $right);
    background-origin: border-box;
    background-clip: content-box, border-box;
    @include transition($transition);
}

@mixin gradient-border($left, $right) {
    -moz-border-image: -moz-linear-gradient(top, $left 0%, $right 100%);
    -webkit-border-image: -webkit-linear-gradient(top, $left 0%, $right 100%);
    border-image: linear-gradient(to bottom, $left 0%, $right 100%);
    background-clip: padding-box;
    border-image-slice: 1;
}

@mixin text-gradient ($left, $right) {
    background: -webkit-linear-gradient(-25deg, $left 0%, $right 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}

@mixin gradient-left-right($leftColor, $rightColor) {
    background-image: -moz-linear-gradient( 0deg, $leftColor 0%, $rightColor 100%);
    background-image: -webkit-linear-gradient( 0deg, $leftColor 0%, $rightColor 100%);
    background-image: -ms-linear-gradient( 0deg, $leftColor 0%, $rightColor 100%);
}

@mixin gradient-top-bottom($from, $to) {
    background-color: $from;
    background-image: -moz-linear-gradient($from, $to);
    background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($from), to($to));
    background-image: -webkit-linear-gradient($from, $to);
    background-image: -o-linear-gradient($from, $to);
}

@mixin hostgr ($left, $right) {
    background-image: -moz-linear-gradient( 90deg, $left 0%, $right 92%);
    background-image: -webkit-linear-gradient( 90deg, $left 0%, $right 92%);
    background-image: -ms-linear-gradient( 90deg, $left 0%, $right 92%);
}

// Single side border-radius
@mixin border-top-radius($radius) {
    border-top-right-radius: $radius;
    border-top-left-radius: $radius;
}

@mixin border-right-radius($radius) {
    border-bottom-right-radius: $radius;
    border-top-right-radius: $radius;
}

@mixin border-bottom-radius($radius) {
    border-bottom-right-radius: $radius;
    border-bottom-left-radius: $radius;
}

@mixin border-left-radius($radius) {
    border-bottom-left-radius: $radius;
    border-top-left-radius: $radius;
}

// BORDER RADIUS
@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    border-radius: $radius;
}

//user select
@mixin userSelect($user) {
    -webkit-user-select: $user;
    -moz-user-select: $user;
    -ms-user-select: $user;
    user-select: $user;
}

//box sizing 
@mixin box-sizing($box) {
    box-sizing: $box;
    -moz-box-sizing: $box;
    -webkit-box-sizing: $box;
}

//placeholder
@mixin placeholder {
     ::-webkit-input-placeholder {
        @content
    }
     :-moz-placeholder {
        @content
    }
     ::-moz-placeholder {
        @content
    }
     :-ms-input-placeholder {
        @content
    }
}

@mixin placeholder-color($color) {
    &::-webkit-input-placeholder {
        /* WebKit browsers */
        color: $color;
    }
    &:-moz-placeholder {
        /* Mozilla Firefox 4 to 18 */
        color: $color;
    }
    &::-moz-placeholder {
        /* Mozilla Firefox 19+ */
        color: $color;
    }
    &:-ms-input-placeholder {
        /* Internet Explorer 10+ */
        color: $color;
    }
}

@mixin placeholder-style($style) {
    &::-webkit-input-placeholder {
        /* WebKit browsers */
        font-style: $style;
    }
    &:-moz-placeholder {
        /* Mozilla Firefox 4 to 18 */
        font-style: $style;
    }
    &::-moz-placeholder {
        /* Mozilla Firefox 19+ */
        font-style: $style;
    }
    &:-ms-input-placeholder {
        /* Internet Explorer 10+ */
        font-style: $style;
    }
}

//   transition 
@mixin transition($transition) {
    -webkit-transition: $transition;
    -moz-transition: $transition;
    transition: $transition;
}

//transform
@mixin transform($transform) {
    -ms-transform: $transform;
    /* IE 9 */
    -webkit-transform: $transform;
    /* Chrome, Safari, Opera */
    transform: $transform;
}

// rotate
@mixin rotate ($deg) {
    @include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($scale) {
    @include transform(scale($scale));
}

// translate
@mixin translate ($x, $y) {
    @include transform(translate($x, $y));
}

@mixin translateX ($x) {
    @include transform(translateX($x));
}

@mixin translateY ($y) {
    @include transform(translateY($y));
}

// translate rotate
@mixin translate-rotate ($x, $y, $deg) {
    @include transform(translate($x, $y)rotate(#{$deg}deg));
}

// skew
@mixin skew ($x, $y) {
    @include transform(skew(#{$x}deg, #{$y}deg));
}

@mixin rotate3d($vector-x: $default-vector-x, $vector-y: $default-vector-y, $vector-z: $default-vector-z, $rotate: $default-rotate, $perspective: false) {
    $trans: rotate3d($vector-x, $vector-y, $vector-z, $rotate);
    @if $perspective {
        $trans: perspective($perspective) $trans;
    }
}

@mixin even() {
    &:nth-child(even) {
        @content
    }
}

@mixin odd() {
    &:nth-child(odd) {
        @content
    }
}

@mixin fontawesomeIcon($content) {
    content: $content;
    font-family: "Font Awesome 5 Free";
    font-weight: 900;
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
    @if $inset {
        -webkit-box-shadow: inset $top $left $blur $color;
        -moz-box-shadow: inset $top $left $blur $color;
        box-shadow: inset $top $left $blur $color;
    }
    @else {
        -webkit-box-shadow: $top $left $blur $color;
        -moz-box-shadow: $top $left $blur $color;
        box-shadow: $top $left $blur $color;
    }
}

@mixin selectArrow($arrow) {
    -webkit-appearance: $arrow;
    -moz-appearance: $arrow;
    appearance: $arrow;
}

@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }
    @-moz-keyframes #{$animationName} {
        @content;
    }
    @-o-keyframes #{$animationName} {
        @content;
    }
    @keyframes #{$animationName} {
        @content;
    }
}

@mixin animate($name, $duration, $iteration, $direction) {
    -webkit-animation-duration: $duration;
    -moz-animation-duration: $duration;
    -o-animation-duration: $duration;
    animation-duration: $duration;
    -webkit-animation-iteration-count: $iteration;
    -moz-animation-iteration-count: $iteration;
    -o-animation-iteration-count: $iteration;
    animation-iteration-count: $iteration;
    -webkit-animation-name: $name;
    -moz-animation-name: $name;
    -o-animation-name: $name;
    animation-name: $name;
    -webkit-animation-direction: $direction;
    -moz-animation-direction: $direction;
    -o-animation-direction: $direction;
    animation-direction: $direction;
}

@mixin skewX($deg) {
    -moz-transform: skewX($deg);
    -webkit-transform: skewX($deg);
    -o-transform: skewX($deg);
    -ms-transform: skewX($deg);
    transform: skewX($deg);
}

@mixin skewY($deg) {
    -moz-transform: skewY($deg);
    -webkit-transform: skewY($deg);
    -o-transform: skewY($deg);
    -ms-transform: skewY($deg);
    transform: skewY($deg);
}

@mixin responsive($breakpoint) {
    @if $breakpoint==xxl {
        @media (min-width: 1400px) and (max-width: 1599.98px) {
            @content;
        }
        ;
    }
    @if $breakpoint==xl {
        @media (min-width: 1200px) and (max-width: 1399.98px) {
            @content;
        }
        ;
    }
    @if $breakpoint==lg {
        @media (min-width: 992px) and (max-width: 1199.98px) {
            @content;
        }
        ;
    }
    @if $breakpoint==allPhone {
        @media (min-width: 320px) and (max-width: 991.98px) {
            @content;
        }
        ;
    }
    @if $breakpoint==md {
        @media (min-width: 768px) and (max-width: 991.98px) {
            @content;
        }
        ;
    }
    @if $breakpoint==sm {
        @media only screen and (max-width: 767.98px) {
            @content;
        }
        ;
    }
    @if $breakpoint==xs {
        @media only screen and (max-width: 575.98px) {
            @content;
        }
        ;
    }
    @if $breakpoint==xxs {
        @media only screen and (max-width: 480px) {
            @content;
        }
        ;
    }
    @if $breakpoint==vxxs {
        @media only screen and (max-width: 375px) {
            @content;
        }
        ;
    }
    @if $breakpoint==phone {
        @media only screen and (max-width: 320px) {
            @content;
        }
        ;
    }
}

@mixin gradient-border-with-radius($left, $right) {
    background-image: linear-gradient(white, white), radial-gradient(circle at top left, $left, $right);
    background-origin: border-box;
    background-clip: content-box, border-box;
    @include transition($transition);
}

@mixin gradient-border($left, $right) {
    -moz-border-image: -moz-linear-gradient(top, $left 0%, $right 100%);
    -webkit-border-image: -webkit-linear-gradient(top, $left 0%, $right 100%);
    border-image: linear-gradient(to bottom, $left 0%, $right 100%);
    background-clip: padding-box;
    border-image-slice: 1;
}

@mixin text-gradient ($left, $right) {
    background: -webkit-linear-gradient(-25deg, $left 0%, $right 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}

@mixin gradient-left-right($leftColor, $rightColor) {
    background-image: -moz-linear-gradient(0deg, $leftColor 0%, $rightColor 100%);
    background-image: -webkit-linear-gradient(0deg, $leftColor 0%, $rightColor 100%);
    background-image: -ms-linear-gradient(0deg, $leftColor 0%, $rightColor 100%);
}

@mixin gradient-top-bottom($from, $to) {
    background-color: $from;
    background-image: -moz-linear-gradient($from, $to);
    background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($from), to($to));
    background-image: -webkit-linear-gradient($from, $to);
    background-image: -o-linear-gradient($from, $to);
}

@mixin hostgr ($left, $right) {
    background-image: -moz-linear-gradient(90deg, $left 0%, $right 92%);
    background-image: -webkit-linear-gradient(90deg, $left 0%, $right 92%);
    background-image: -ms-linear-gradient(90deg, $left 0%, $right 92%);
}

// Single side border-radius
@mixin border-top-radius($radius) {
    border-top-right-radius: $radius;
    border-top-left-radius: $radius;
}

@mixin border-right-radius($radius) {
    border-bottom-right-radius: $radius;
    border-top-right-radius: $radius;
}

@mixin border-bottom-radius($radius) {
    border-bottom-right-radius: $radius;
    border-bottom-left-radius: $radius;
}

@mixin border-left-radius($radius) {
    border-bottom-left-radius: $radius;
    border-top-left-radius: $radius;
}

// BORDER RADIUS
@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    border-radius: $radius;
}

//user select
@mixin userSelect($user) {
    -webkit-user-select: $user;
    -moz-user-select: $user;
    -ms-user-select: $user;
    user-select: $user;
}

//box sizing 
@mixin box-sizing($box) {
    box-sizing: $box;
    -moz-box-sizing: $box;
    -webkit-box-sizing: $box;
}

//placeholder
@mixin placeholder {
    ::-webkit-input-placeholder {
        @content
    }

    :-moz-placeholder {
        @content
    }

    ::-moz-placeholder {
        @content
    }

    :-ms-input-placeholder {
        @content
    }
}

@mixin placeholder-color($color) {
    &::-webkit-input-placeholder {
        /* WebKit browsers */
        color: $color;
    }

    &:-moz-placeholder {
        /* Mozilla Firefox 4 to 18 */
        color: $color;
    }

    &::-moz-placeholder {
        /* Mozilla Firefox 19+ */
        color: $color;
    }

    &:-ms-input-placeholder {
        /* Internet Explorer 10+ */
        color: $color;
    }
}

@mixin placeholder-style($style) {
    &::-webkit-input-placeholder {
        /* WebKit browsers */
        font-style: $style;
    }

    &:-moz-placeholder {
        /* Mozilla Firefox 4 to 18 */
        font-style: $style;
    }

    &::-moz-placeholder {
        /* Mozilla Firefox 19+ */
        font-style: $style;
    }

    &:-ms-input-placeholder {
        /* Internet Explorer 10+ */
        font-style: $style;
    }
}

//   transition 
@mixin transition($transition) {
    -webkit-transition: $transition;
    -moz-transition: $transition;
    transition: $transition;
}

//transform
@mixin transform($transform) {
    -ms-transform: $transform;
    /* IE 9 */
    -webkit-transform: $transform;
    /* Chrome, Safari, Opera */
    transform: $transform;
}

// rotate
@mixin rotate ($deg) {
    @include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($scale) {
    @include transform(scale($scale));
}

// translate
@mixin translate ($x, $y) {
    @include transform(translate($x, $y));
}

@mixin translateX ($x) {
    @include transform(translateX($x));
}

@mixin translateY ($y) {
    @include transform(translateY($y));
}

// translate rotate
@mixin translate-rotate ($x, $y, $deg) {
    @include transform(translate($x, $y) rotate(#{$deg}deg));
}

// skew
@mixin skew ($x, $y) {
    @include transform(skew(#{$x}deg, #{$y}deg));
}

@mixin rotate3d($vector-x: $default-vector-x, $vector-y: $default-vector-y, $vector-z: $default-vector-z, $rotate: $default-rotate, $perspective: false) {
    $trans: rotate3d($vector-x, $vector-y, $vector-z, $rotate);

    @if $perspective {
        $trans: perspective($perspective) $trans;
    }
}

@mixin even() {
    &:nth-child(even) {
        @content
    }
}

@mixin odd() {
    &:nth-child(odd) {
        @content
    }
}

@mixin fontawesomeIcon($content) {
    content: $content;
    font-family: "Font Awesome 5 Free";
    font-weight: 900;
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
    @if $inset {
        -webkit-box-shadow: inset $top $left $blur $color;
        -moz-box-shadow: inset $top $left $blur $color;
        box-shadow: inset $top $left $blur $color;
    }

    @else {
        -webkit-box-shadow: $top $left $blur $color;
        -moz-box-shadow: $top $left $blur $color;
        box-shadow: $top $left $blur $color;
    }
}

@mixin selectArrow($arrow) {
    -webkit-appearance: $arrow;
    -moz-appearance: $arrow;
    appearance: $arrow;
}

@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }

    @-moz-keyframes #{$animationName} {
        @content;
    }

    @-o-keyframes #{$animationName} {
        @content;
    }

    @keyframes #{$animationName} {
        @content;
    }
}

@mixin animate($name, $duration, $iteration, $direction) {
    -webkit-animation-duration: $duration;
    -moz-animation-duration: $duration;
    -o-animation-duration: $duration;
    animation-duration: $duration;
    -webkit-animation-iteration-count: $iteration;
    -moz-animation-iteration-count: $iteration;
    -o-animation-iteration-count: $iteration;
    animation-iteration-count: $iteration;
    -webkit-animation-name: $name;
    -moz-animation-name: $name;
    -o-animation-name: $name;
    animation-name: $name;
    -webkit-animation-direction: $direction;
    -moz-animation-direction: $direction;
    -o-animation-direction: $direction;
    animation-direction: $direction;
}

@mixin skewX($deg) {
    -moz-transform: skewX($deg);
    -webkit-transform: skewX($deg);
    -o-transform: skewX($deg);
    -ms-transform: skewX($deg);
    transform: skewX($deg);
}

@mixin skewY($deg) {
    -moz-transform: skewY($deg);
    -webkit-transform: skewY($deg);
    -o-transform: skewY($deg);
    -ms-transform: skewY($deg);
    transform: skewY($deg);
}

// Border Mixin
@mixin border($border-width, $border-style, $border-color, $border-radius ) {
    border-width: $border-width;
    border-style: $border-style;
    border-color:  $border-color;
    border-radius: $border-radius;
    
}

.flexContent{
    @include flexbox();
    @include justify-content(space-between);
    @include align-items(center);
    @include flex-wrap(wrap);
  }
